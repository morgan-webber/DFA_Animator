import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

@SuppressWarnings({ "unused"})
public class DFAManager implements ActionListener, MouseMotionListener, KeyListener{
	
	//----------------
	//Constants
	//----------------

	//The maximum/minimum number of states we can create
	private final static int MAX_NUM_STATES = 5; //PROGRAM IS CREATED TO SUSTAIN MAXIMUM 5
	private final static int MIN_NUM_STATES = 0;
	
	//Error color for fields
	private final Color ERROR_BACKGROUND = new Color(255, 100, 100);
	
	//----------------
	//Variables
	//----------------

	//The frame for the application
	private JFrame frmDfaAnimator;
	
	//This is the current DFA that we are manipulating
	private DFA activeDFA;
	
	//The current state that the user is hovering on top of
	private DFAState hoveredState;
	
	//Used for random number generation
	Random rand = new Random();
	
	//These are the DFA's the user has created
	private ArrayList<DFA> createdDFA = new ArrayList<>();
	
	//Number of random DFA's built. This is for naming them
	int numRandomDFA = 0;
	
	//The fields on the gui
	private JTextField txtInputString, txtAlphabet, txtAcceptStates, txtName;
	private JButton btnBuildDFA, btnResetDFA, btnBuildRandom,
					btnStepForward, btnStepBack, btnDrawDfa,
					btnAutomate;
	private JSpinner spnStartState, spnNumStates;
	private JComboBox<String> DFASelector;
	private DFACanvas canvas;
	
	
	//----------------
	//Methods
	//----------------
	
	/**
	 * This is the main method, program starts here
	 */
	public static void main(String[] args){
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					DFAManager window = new DFAManager();
					window.frmDfaAnimator.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});	
	}
	
	/**
	 * Create our window
	 */
	public DFAManager(){
		initialize();
	}
	
	/**
	 * Initialize the contents of the frame.
	 * This code was auto-generated by Eclipse 
	 */
	private void initialize() {
		
		//Set the icon for the window
		ImageIcon frameIcon = new ImageIcon("icon.png");
		
		frmDfaAnimator = new JFrame();
		frmDfaAnimator.setTitle("DFA Animator");
		frmDfaAnimator.setBounds(100, 100, 645, 600);
		frmDfaAnimator.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmDfaAnimator.setResizable(false);
		frmDfaAnimator.setIconImage(frameIcon.getImage());
		frmDfaAnimator.getContentPane().setLayout(null);
		
		canvas = new DFACanvas();
		canvas.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		canvas.setBounds(197, 61, 422, 423);
		canvas.addMouseMotionListener(this);
		frmDfaAnimator.getContentPane().add(canvas);
		
		txtInputString = new JTextField();
		txtInputString.addKeyListener(this);
		txtInputString.setText("Input String Here...");
		txtInputString.setBounds(190, 498, 400, 20);
		txtInputString.addActionListener(this);
		frmDfaAnimator.getContentPane().add(txtInputString);
		txtInputString.setColumns(10);
		
		btnBuildDFA = new JButton("Build DFA...");
		btnBuildDFA.setBounds(25, 430, 125, 23);
		btnBuildDFA.addActionListener(this);
		frmDfaAnimator.getContentPane().add(btnBuildDFA);
		
		btnResetDFA = new JButton("Reset DFA");
		btnResetDFA.setBounds(460, 529, 125, 23);
		btnResetDFA.addActionListener(this);
		frmDfaAnimator.getContentPane().add(btnResetDFA);;
		
		btnBuildRandom = new JButton("Build Random");
		btnBuildRandom.setBounds(25, 464, 125, 23);
		btnBuildRandom.addActionListener(this);
		frmDfaAnimator.getContentPane().add(btnBuildRandom);
		
		JLabel lblDfaAnimator = new JLabel("DFA Animator");
		lblDfaAnimator.setFont(new Font("Tahoma", Font.BOLD, 32));
		lblDfaAnimator.setBounds(202, 11, 223, 39);
		frmDfaAnimator.getContentPane().add(lblDfaAnimator);
		
		btnStepForward = new JButton("Step Forward");
		btnStepForward.setBounds(325, 529, 125, 23);
		btnStepForward.addActionListener(this);
		frmDfaAnimator.getContentPane().add(btnStepForward);
		
		JLabel lblSelectDfa = new JLabel("Select DFA:");
		lblSelectDfa.setBounds(10, 64, 81, 14);
		frmDfaAnimator.getContentPane().add(lblSelectDfa);
		
		DFASelector = new JComboBox<String>();
		DFASelector.setBounds(101, 61, 86, 20);
		DFASelector.addActionListener(this);
		frmDfaAnimator.getContentPane().add(DFASelector);
		
		JLabel lblAlphabet = new JLabel("Alphabet:");
		lblAlphabet.setBounds(10, 240, 177, 20);
		frmDfaAnimator.getContentPane().add(lblAlphabet);
		
		txtAlphabet = new JTextField();
		txtAlphabet.setBounds(101, 260, 86, 20);
		frmDfaAnimator.getContentPane().add(txtAlphabet);
		txtAlphabet.setColumns(10);
		
		JLabel lblStartingState = new JLabel("Starting State:");
		lblStartingState.setBounds(10, 280, 177, 20);
		frmDfaAnimator.getContentPane().add(lblStartingState);
		
		spnStartState = new JSpinner();
		spnStartState.setBounds(145, 300, 42, 20);
		frmDfaAnimator.getContentPane().add(spnStartState);
		spnStartState.setValue(1);
		spnStartState.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				//Starting state should always be less then/equal to the number of states
				if (Integer.parseInt(spnStartState.getValue().toString()) > Integer.parseInt(spnNumStates.getValue().toString())){
					spnStartState.setValue(spnNumStates.getValue());
				}
				//Starting state should always be greater than 1
				else if (Integer.parseInt(spnStartState.getValue().toString()) < MIN_NUM_STATES+1){
					spnStartState.setValue(MIN_NUM_STATES+1);
				}
				
				
			}
		});
		
		JLabel lblAcceptingStates = new JLabel("Accepting States (csv):");
		lblAcceptingStates.setBounds(10, 320, 177, 20);
		frmDfaAnimator.getContentPane().add(lblAcceptingStates);
		
		txtAcceptStates = new JTextField();
		txtAcceptStates.setBounds(101, 340, 86, 20);
		frmDfaAnimator.getContentPane().add(txtAcceptStates);
		txtAcceptStates.setColumns(10);
		
		JLabel lblName = new JLabel("Name:");
		lblName.setBounds(10, 360, 177, 20);
		frmDfaAnimator.getContentPane().add(lblName);
		
		txtName = new JTextField();
		txtName.setBounds(101, 380, 86, 20);
		frmDfaAnimator.getContentPane().add(txtName);
		txtName.setColumns(10);
		
		JLabel lblNumStates = new JLabel("Number of States:");
		lblNumStates.setBounds(10, 200, 177, 20);
		frmDfaAnimator.getContentPane().add(lblNumStates);
		
		spnNumStates = new JSpinner();
		spnNumStates.setBounds(145, 220, 42, 20);
		frmDfaAnimator.getContentPane().add(spnNumStates);
		spnNumStates.setValue(1);
		spnNumStates.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent arg0) {
				//Bind the number of states we can draw for simplicity's sake
				if (Integer.parseInt(spnNumStates.getValue().toString()) > MAX_NUM_STATES){
					spnNumStates.setValue(MAX_NUM_STATES);
				}
				else if (Integer.parseInt(spnNumStates.getValue().toString()) < MIN_NUM_STATES){
					spnNumStates.setValue(MIN_NUM_STATES);
				}
				
				if (Integer.parseInt(spnNumStates.getValue().toString()) != 0){
					if (Integer.parseInt(spnStartState.getValue().toString()) > Integer.parseInt(spnNumStates.getValue().toString())){
						spnStartState.setValue(spnNumStates.getValue());
					}
				}
				
			}
		});
		
		btnDrawDfa = new JButton("Draw DFA");
		btnDrawDfa.setBounds(98, 92, 89, 23);
		frmDfaAnimator.getContentPane().add(btnDrawDfa);
		
		btnAutomate = new JButton("Automate");
		btnAutomate.setBounds(190, 529, 125, 23);
		btnAutomate.addActionListener(this);
		
		frmDfaAnimator.getContentPane().add(btnAutomate);
		btnDrawDfa.addActionListener(this);
	}
	
	/**
	 * Resets the DFA to it's original state by removing it's input
	 * string and resetting all of the colors for the states/transitions 
	 */
	public void resetDFA(DFA initDFA){
		//Set the DFA to defaults
		initDFA.setCurrentState(activeDFA.getStartState());
		initDFA.setFinished(false);
		initDFA.setCurrentLetterIndex(0);
	}
	
	/**
	 * Generates a random DFA with a given number of states using
	 * a given alphabet. The transitions are randomly generated. If
	 * the user indicated 0 states, this will make a DFA with a random number
	 * of states. If no name was provided, this method will provide a name
	 * for the DFA as well.
	 * 
	 * @return
	 * 		A new, randomly generated DFA of the given size and alphabet
	 */
	public DFA generateRandomDFA(){
		
		//All we need to randomize is number of states, alphabet and name
		int numStates = Integer.parseInt(this.spnNumStates.getValue().toString());
		if (numStates == 0){ //randomize if they want us to
			numStates = rand.nextInt(this.MAX_NUM_STATES-1) + 1;
		}
		 
		char[] alphabet = this.txtAlphabet.getText().toCharArray();
		String name = this.txtName.getText();
		int startState = rand.nextInt(numStates);
		
		//Generate our states
		int[] acceptStates = {0};
		DFAState[] states = DFA.createStates(numStates, acceptStates, startState);
		
		//Generate random number of accept states
		int numAccept = rand.nextInt(numStates);
		for (int i = 0; i < numAccept; i++){
			//Randomly assign a state as an accept state
			states[rand.nextInt(numStates)].setIsAccept(true);
		}
		
		//Generate random transitions
		for (DFAState state : states){
			for (char letter : alphabet){
				state.addTransition(String.valueOf(letter), states[rand.nextInt(numStates)]);
			}
		}
				
		//Give the DFA a name if user didn't
		if (name.equals("")){
			name = "RandomDFA" + String.valueOf(this.numRandomDFA);
		}
		
		DFA randDFA = new DFA(states, alphabet, startState, acceptStates, name);
		this.numRandomDFA++;
		
		return randDFA;
		
		
	}
	
	/**
	 * Creates a new DFA using the information stored in the sliders
	 * and text boxes.
	 * 
	 * @return
	 * 		A new, complete DFA
	 */
	public DFA createDFA(){
		
		//Gather the raw data from the spinners and text boxes
		int numStates = Integer.parseInt(this.spnNumStates.getValue().toString());
		char[] alphabet = this.txtAlphabet.getText().toCharArray();
		int startState = Integer.parseInt(this.spnStartState.getValue().toString()) - 1;
		int[] acceptStates = parseAcceptStateText();
		
		String name;	
		if (this.txtName.getText().equals("")){
			name = String.valueOf(this.createdDFA.size());
		}
		else{
			
			name = this.txtName.getText();
		}
		
		
		//Create our DFA
		DFAState[] states = DFA.createStates(numStates, acceptStates, startState);
		DFA newDFA = new DFA(states, alphabet, startState, acceptStates, name);
		
		return newDFA;
	}
	
	/**
	 * Begins a wizard that will prompt the user to create the 
	 * transitions for each state in the DFA
	 */
	public void runTransitionWizard(DFA initDFA){
		TransitionWizard theWizard = new TransitionWizard(initDFA, this.frmDfaAnimator);
		theWizard.setVisible(true);
	}

	/**
	 * Sets the active DFA to a new DFA
	 * 
	 * @param newActiveDFA
	 * 		The new active DFA
	 */
	private void setActiveDFA(DFA newActiveDFA){ this.activeDFA = newActiveDFA; }

	/**
	 * This method will handle all button presses in the application
	 * 
	 * @param event
	 *		The event that triggered this action
	 */
	@Override
	public void actionPerformed(ActionEvent event) {
		
		//build button press
		if (event.getSource() == this.btnBuildDFA){
			
			if (correctInputCheck(true)){ //if all of our input is valid
				
				//Create our DFA and add it to our created DFA's
				DFA newDFA = this.createDFA();
				this.createdDFA.add(newDFA);
				
				//Add the DFA to the combobox
				this.DFASelector.addItem(newDFA.getName());
				
				//Run the transitions wizard to create the transitions for each state
				this.runTransitionWizard(newDFA);
				
			}
			
		}
		//build random button press
		else if (event.getSource() == this.btnBuildRandom){
			
			if (correctInputCheck(false)){
				
				//Create our DFA and add it to our created DFA's
				DFA randDFA = this.generateRandomDFA();
				this.createdDFA.add(randDFA);
				
				//Add the DFA to the combobox
				this.DFASelector.addItem(randDFA.getName());
			
			}
			
		}
		//Combo box selection
		else if (event.getSource() == this.DFASelector){
			
			String selectedName = this.DFASelector.getSelectedItem().toString();
			for (DFA dfa : this.createdDFA){
				if (selectedName.equals(dfa.getName())){
					this.activeDFA = dfa;
				}
			}
		}
		//DrawDFA button press
		else if (event.getSource() == this.btnDrawDfa){
			
			//Only do something if there is a DFA to draw
			if (activeDFA != null){
				this.canvas.setDFA(activeDFA);
				this.canvas.repaint();
			}
			else{
				JOptionPane.showMessageDialog(this.frmDfaAnimator, "There isn't a DFA to draw!");
			}
			 
		}
		//StepForward button press
		else if (event.getSource() == this.btnStepForward){
			if (!activeDFA.isFinished()){
				activeDFA.makeTransition();	
			}
			
			this.canvas.repaint();
		}
		//Reset button push
		else if (event.getSource() == this.btnResetDFA){
			//Reset our DFA
			this.resetDFA(this.activeDFA);
			
			//Redraw the DFA
			this.canvas.repaint();
		}
		//Automate button push
		else if (event.getSource() == this.btnAutomate){
			DFAAutomator auto = new DFAAutomator(this.activeDFA, this.canvas);
			auto.run();
		}
		
	}
	
	/**
	 * Checks all of the input fields for valid inputs
	 * 
	 * @return
	 * 		Returns true if all of the input fields have
	 *		valid input in them
	 */
	private boolean correctInputCheck(boolean regularBuild){
	
		//Make sure there is an alphabet
		if (this.txtAlphabet.getText().equals("")){
			//Inform the user of their error
			JOptionPane.showMessageDialog(this.frmDfaAnimator, "Oops, please make sure there is an alphabet!");
			this.txtAlphabet.setBackground(ERROR_BACKGROUND);
			return false;
		}
		this.txtAlphabet.setBackground(Color.WHITE); //test passed, make sure we reset color
		
		//Make sure the name is unique
		if (this.txtName.getText() != ""){
			for (DFA dfa : this.createdDFA){
				if (this.txtName.getText().equals(dfa.getName())){
					JOptionPane.showMessageDialog(this.frmDfaAnimator, "Sorry, a DFA with that name already exists");
					this.txtName.setBackground(ERROR_BACKGROUND);
					return false;
				}
			}
		}
		this.txtName.setBackground(Color.WHITE);
		
		//Only do this if we aren't building a random DFA
		if (regularBuild){
			
			//Test if the accept text field is not empty
			if (this.txtAcceptStates.getText().equals("")){
				//Inform the user of their error
				JOptionPane.showMessageDialog(this.frmDfaAnimator, "Please enter a values for the accept states.");
				this.txtAcceptStates.setBackground(ERROR_BACKGROUND);
				return false;
			}
			
			//Test if the text field can be parsed
			try{
				parseAcceptStateText();
			}
			catch(NumberFormatException nfe){
				//Inform the user of their error
				JOptionPane.showMessageDialog(this.frmDfaAnimator, "Oops, please enter only integers for the accept states.");
				this.txtAcceptStates.setBackground(ERROR_BACKGROUND);
				return false;
			}
			
			this.txtAlphabet.setBackground(Color.WHITE); //test passed, make sure we reset color
		}
		
		//At this point, all of our test have passed
		return true;
	}
	
	/**
	 * Helper method that will parse the accept state text box using a comma as a
	 * delimiter
	 * 
	 * @return
	 * 		An array of int that indicates which states are accept states
	 */
	private int[] parseAcceptStateText(){
		String acceptStateTextField = this.txtAcceptStates.getText();
		ArrayList<String> acceptStatesStrings = new ArrayList<>();
		String temp = "";
		for (int i = 0; i < acceptStateTextField.length(); i++){
			//if we see a comma, add the string to the array and reset temp string
			if (acceptStateTextField.charAt(i) == ','){
				acceptStatesStrings.add(String.valueOf(temp));
				temp = "";
			}
			//otherwise, add the current character to the temp string
			else{
				temp += acceptStateTextField.charAt(i);
			}
		}
		
		//if we broke out of the loop and have a string left over, add it too
		if (!temp.equals("")){
			acceptStatesStrings.add(temp);
		}
		
		//Now, we must convert each string to an integer in the array
		int[] acceptStates = new int[acceptStatesStrings.size()];
		int i = 0;
		for (String acceptStateStr : acceptStatesStrings){
			acceptStates[i] = Integer.parseInt(acceptStateStr) - 1;
			i++;
		}
		
		return acceptStates;
	}
	
	
	/**
	 * Getter for our frame
	 * @return
	 * 		The frame for the application
	 */
	public JFrame getFrmDfaAnimator() {
		return frmDfaAnimator;
	}

	@Override
	/**
	 * This will move the state that the user is hovering over to the new location
	 * that the mouse is pointing to
	 */
	public void mouseDragged(MouseEvent arg0) {
		if (hoveredState != null){
			this.hoveredState.setPosition(arg0.getX(), arg0.getY());
			this.canvas.repaint();
		}
	}

	/**
	 * This will be used to determine which state the user is pointing at
	 * @param arg0
	 */
	public void mouseMoved(MouseEvent arg0) {
		//Find out where the mouse is pointing
		int mouseX = arg0.getX();
		int mouseY = arg0.getY();
		
		//Find out which state the mouse is on top of using these
		//upper/lower bounds
		int lowerX = 0;
		int upperX = 0;
		int lowerY = 0;
		int upperY = 0;
		if (this.activeDFA != null){
			for(DFAState state : this.activeDFA.getStates()){
				//Adjust the bounds
				lowerX = state.getX();
				lowerY = state.getY();
				upperX = state.getX()+this.canvas.getDFADiam();
				upperY = state.getY()+this.canvas.getDFADiam();
				
				//If the pointer is inside these bounds, this is our state
				if (mouseX >= lowerX && mouseX <= upperX && mouseY >= lowerY && mouseY <= upperY){
					this.hoveredState = state;
					break;
				}
				
			}
		}
		
	}

	@Override
	public void keyPressed(KeyEvent e) {} //Do nothing
	@Override
	public void keyReleased(KeyEvent e) {
		//If they are deleting a character, do nothing
		if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE){
			return;
		}
		
		if (this.activeDFA != null){
			
			//Make sure that the key typed is part of our alphabet
			boolean isInside = false;
			char letterTyped = e.getKeyChar();
			for (char letter: this.activeDFA.getAlphabet()){
				if (letter == letterTyped){
					isInside = true;
					break;
				}
			}
			
			if (!isInside){
				JOptionPane.showMessageDialog(this.frmDfaAnimator, "Sorry, " + String.valueOf(letterTyped) + 
						" isn't part of the alphabet for this DFA!");
				//Make sure that the letter they typed doesn't show up
				String currentString = this.txtInputString.getText();
				this.txtInputString.setText(currentString.substring(0, currentString.length()-1));
				
				return;
			}
			else{
				this.activeDFA.setInputString(this.txtInputString.getText());
				this.canvas.repaint();
			}
		}
	} //Do nothing

	@Override
	public void keyTyped(KeyEvent e) {} //Do nothing
}
